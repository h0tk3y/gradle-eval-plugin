plugins {
    id 'maven-publish'
    id 'java-gradle-plugin'
    id 'com.gradle.plugin-publish' version '0.10.0'
    id 'org.jetbrains.kotlin.jvm' version '1.2.60'
}

group 'com.github.h0tk3y.gradle.eval'
version '0.0.1'

repositories {
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    compile 'org.jline:jline:3.9.0'
    compile 'net.java.dev.jna:jna:4.5.2'

    testCompile 'junit:junit:4.12'
    testCompile gradleTestKit()
}

gradlePlugin {
    plugins {
        evalPlugin {
            id = 'com.github.h0tk3y.gradle.eval'
            implementationClass = 'com.github.h0tk3y.gradle.eval.GradleEvalPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/h0tk3y/gradle-eval-plugin'
    vcsUrl = 'https://github.com/h0tk3y/gradle-eval-plugin.git'
    tags = ['gradle', 'repl', 'eval', 'groovy']
    plugins {
        evalPlugin {
            displayName = 'eval'
            description = 'A Gradle plugin that evaluates a string passed from the command line in the project context'
            version = project.version
        }
    }
}

// testing

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

// Add the classpath file to the test runtime classpath
dependencies {
    testRuntime files(createClasspathManifest)
}